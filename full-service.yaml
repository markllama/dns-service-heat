---

- name: Deploy the DNS servers
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  tasks:
  - name: Create the Heat Stack
    os_stack:
      name: "{{ stack_name }}"
      template: dns_service.yaml
      parameters:
        domain_name: "{{ domain_name | default('example.com') }}"
        external_network:  "{{ external_network }}"
        ssh_key_name: "{{ ssh_key_name }}"
        dns_forwarders: "{{ dns_forwarders }}"
        image: "{{ image }}"

        slave_count: "{{ slave_count | default(3) }}"
        slave_server_group_policies: "{{ slave_server_group_policies }}"

    register: stack_output

  - debug: var=stack_output

  - name: Add the master to the inventory
    add_host:
      name: "{{ stack_output.stack.outputs[0].output_value.master.address }}"
      groups: masters
      zone: "{{ domain_name }}"
      masters: [" {{ stack_output.stack.outputs[0].output_value.master.name }} "]
      forwarders: "{{ dns_forwarders }}"
      contact: "{{ contact | default('admin@{{ domain_name }}') }}"
      nameservers: "{{ [stack_output.stack.outputs[0].output_value.master] + stack_output.stack.outputs[0].output_value.slaves }}"

  - name: Add the slaves to the inventory
    add_host:
      name: "{{ item.address }}"
      groups: slaves
      zone: "{{ domain_name }}"
      masters: ["{{ stack_output.stack.outputs[0].output_value.master.name }}"]
      forwarders: "{{ dns_forwarders }}"
      contact: "{{ contact | default('admin@{{ domain_name }}') }}"
      nameservers: "{{ [stack_output.stack.outputs[0].output_value.master] + stack_output.stack.outputs[0].output_value.slaves }}"
    with_items: "{{ stack_output.stack.outputs[0].output_value.slaves }}"

  - debug: var=hostvars

  - name: Wait for the deployed servers
    wait_for:
      host: "{{ item }}"
      port: 22
    with_items: "{{ groups['all'] }}"

- hosts: all
  become: true
  tasks:

  - name: Subscribe to RHN and auto-attach
    redhat_subscription:
      username: "{{ rhn_username }}"
      password: "{{ rhn_password }}"
      autosubscribe: true
    when: rhn_username and rhn_password and rhn_pool == ""

  - name: Subscribe to RHN and attach a pool
    redhat_subscription:
      username: "{{ rhn_username }}"
      password: "{{ rhn_password }}"
      pool_ids: ["{{ rhn_pool }}"]
    when: rhn_username and rhn_password and rhn_pool



# - include: ansible/bind-server.yml
# Create a bind master
- hosts: all
  become: true
  tasks:

    - name: firewall daemon
      action: package name=firewalld state=installed

    - name: firewall python module
      action: package name=python-firewall state=installed

    - name: install bind utilities
      action: package name=bind-utils state=installed

    - name: install bind server
      action: package name=bind state=installed

    - name: firewall service
      action: systemd name=firewalld enabled=yes state=started

    - name: dns service
      action: systemd name=named enabled=yes state=started

    - name: dns port
      action: firewalld zone=public service=dns state=enabled permanent=yes immediate=yes

    - name: named configuration file
      action: template src=ansible/templates/named.conf.j2 dest=/etc/named.conf

- hosts: masters
  become: true
  tasks:

    # On RHEL7 this is python-dns.  On F25 it's python2-dns
    - name: install python DNS package
      action: package name=python2-dns state=installed
      when: (ansible_distribution == "Fedora")

    - name: install python DNS package
      action: package name=python-dns state=installed
      when: (ansible_distribution == "RHEL" or ansible_distribution == "CentOS")

    - name: named master zone configuration file(s)
      action: template src=ansible/templates/zones.conf-master.j2 dest=/etc/named/zones.conf
      notify:
      - restart named

    - name: set zone update key
      action: template src=ansible/templates/update.key.j2 dest=/etc/named/update.key
      notify:
      - restart named

    - name: set zone data file(s)
      action: template src=ansible/templates/zone.db.j2 dest=/var/named/dynamic/zone.db owner=named group=named
      tags:
        - zonedata
      notify:
      - restart named

  handlers:
    - name: restart named
      systemd: name=named state=restarted


- hosts: slaves
  become: true
  tasks:
    - name: named slave zone configuration file(s)
      action: template src=ansible/templates/zones.conf-slave.j2 dest=/etc/named/zones.conf
      notify:
      - restart named

    - name: set zone update key
      action: template src=ansible/templates/update.key.j2 dest=/etc/named/update.key
      notify:
      - restart named

  handlers:
    - name: restart named
      systemd: name=named state=restarted
